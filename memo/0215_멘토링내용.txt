
* API 구현 관점
비즈니스 관점으로
1. 서비스별 API 명세 = 목록 작성
  - 주문 내역을 본다고 했을때 userid, productname, price 뭐 뭐 볼건지 정해져있어야
     data dependency와 호출위치가 달라지니까 상세하게 적어놔야돼
     마이뷰를 만들까
     로그인을 하면은 key 값이 생기니까 그걸 가지고서 찔러서 조회를 할거냐
  - 주문을 한다 치면 상품의 상세정보까지 가져올건지 이름하고 가격만 가져올건지 
    데이터 스키마를 그려보면 알 수 있찌
  - 외부시스템의 경우 요청 - 승인/실패 (관리자가 승인 실패 목록을 조회하거나
     주문내역에서 승인 실패 내역을 조회할 수 있음)
2. DB 스키마 = 데이터 칼럼 작성 어그리게이트가 아님
3. 히트맵 다시 확인
  - 서비스와 DB 연결이 잘된다 = 응집도가 높다 = 좋은거
  - 다른 서비스가 다른 DB를 자꾸 찌른다 = 나쁜거
    -> API 중요도에 따라 개선점을 생각한다
    -> 자주사용한는 API -- 서비스를 합친다 / 드물게 사용하는 API -- composition?
4. API 씬을 붙여서 Boris 다시 그리기 -> API 콜수와 몇개의 DB를 호출하는가
5. 관점 스코어링 표의 근거가 부족 -- 고민해보기
-> 그래서 서비스가 5개 정도로 데이터 관점으로 설계한 거랑 비슷하게 다시 변했다.


* UI씬 고객/사용자 관점
   한 화면에 보이는 씬에 집중해보기
   ex1. 오류가 나는 경우 상품 상세까지는 보이고 주문은 못하게 하겟다 -- step 별로 커버 하겠다
   ex2. 메인화면은100명이보고 결제화면은1명이본다
         -- 유독 자주보는 페이지를 위해 하나의 별도 서비스로 만들겠다 ex. mainpage 
            or  유저랑 상품을 합쳐버리겠다
         -- ex. 메인 페이지에 상품의 칼럼2개 유저의 칼럼2개 식으로 필요하다면 패턴사용해서 DB복제 
   ex3. 재고가 없으면 상품을 안보여줄건지, 주문을못하게할건지  
-> 나눠진 서비스에서 +1 되었다. 개선되었다. 

* Snap-E 작성하여 최종 api 명세와 db가 나옴
어떤 패턴 적용해보면 좋을지

* 개발 환경 적응하기
- intershop project에서 user-service 한줄 씩 넣으면서 돌려보기
- alt + enter 자동 import
- ctrl + alt? 구현부 보기
디펜던시 버전 잘 맞춰주고 8080포트에서 열어보기
