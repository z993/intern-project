안녕하세요 클라우드아키텍처팀 인턴 진보은입니다. 발표 시작하겠습니다.
저는 MSA 도메인 분석 최적화 및 기술패턴 제안이라는 주제로 이번 과제를 진행하였습니다.
// 기존에 모놀리스식 어플리케이션 개발 경험이 있고 MSA는 개념정도만 알고있어서
// 유샵이라는 온라인 상품 판매 서비스를 MSA로 전환하는 시뮬레이션을 해보면서
서비스의 Data dependency, api call 흐름을 분석하여 최적의 도메인 설계 및 마이크로 서비스 제안과
MSA 개발을 위해 구현 시 고려해야 할 요소를 기술패턴을 적용하여 구현 및 검증하는 것을 목표로 선정하였습니다.


서비스 분석을 통한 마이크로 서비스 경계를 도출하기 위해
유샵의 서비스 시나리오를 작성하여 요구사항을 정의하고 서브 도메인별 이벤트 스토밍을 진행하였습니다.
// 해당 이미지는 상품 주문이라는 서브 도메인의 이벤트 스토밍 내용입니다.
// 먼저, 시간의 순서대로 발생되는 도메인 이벤트를 나열하였고 
// 이벤트를 트리거하는 명령인 커맨드, 이벤트의 주체인 액터, 이벤트와 연동되는 외부시스템들을 표시하였습니다. 
// 커맨드와 이벤트에 영향을 받는 데이터 요소를 어그리게이트로 표시하고,
이벤트 발생 시 타영역의 커맨드를 트리거하는 정책을 도출하였습니다.

다음으로 이러한 이벤트스토밍에서 도출된 어그리게이트의 통합, 분리를 통해 Bounded context를 도출하였습니다.
데이터 관점, 장애 관점, 비즈니스 관점이라는 3가지 기준으로 진행해보았는데
데이터 관점으로는 데이터 연관성 측면으로 분리된 서비스 간의 join 최소화를 고려하였습니다.
// 따라서 같은 페이지에 노출되는 상품과 리뷰, 문의를 하나의 서비스로 구성하고
// 주문정보와 배송정보 픽업예약 어그리게이트도 통합하여 
// 데이터 관점에서 연관성 있는 어그리게이트들을 통합하는 방식으로 바운디드 컨텍스트를 구성하였습니다. 
장애 관점은 빠른 장애 대응과 장애 격리를 통해 비즈니스 피해 최소화를 고려하였습니다.
// 주문 서비스가 가장 코어한 서비스라고 판단했기 때문에 다른 서비스가 가용하지 않아도 주문이 가능하도록 
주문정보와 배송정보 픽업예약 장바구니 어그리케이트들을 각각 분리하였고
상품 조회 부분만 스케일아웃이 가능하도록 상품 read와 write 를 분리했습니다.
비즈니스 관점은 비즈니스 변화에 민첩한 대응, 신기술 도입과 적용에 대한 유연성을 고려하였습니다.
예를 들면, 관리자가 매일매일 주문의 통계를 수집한다, 상품 추천기술이 적용된다, 운영조직이 개편된다와 같이 
새로운 비즈니스 시나리오 추가를 시뮬레이션해보면서 바운디드 컨텍스트를 도출했습니다.
이러한 변화에 대응을 위해서 기능적 유사도를 가장 중요하게 생각했습니다.
저는 이 비즈니스 관점이 기능적 유사도에 따라 바운디드 컨텍스트를 도출한 만큼 
single responsibility, 높은 응집도, 낮은 결합도를 가져 
// 독립적인 개발, 배포에도 용이할 것으로 생각하여 
// 이 비즈니스 관점을 좀 더 검토해 보기로 하였습니다.


도메인 분석 최적화를 위하여 앞서 도출한 
후보 서비스의 data dependency와 api call 흐름을 분석하기 위해 
서비스별 data shcema와 api의 관계를 표현한 heat map을 작성하였습니다.
x축이 서비스별 데이터 스키마이고 y축이 서비스별 api 목록이며 검은색 선이 서비스별 경계입니다.
api를 호출하였을떄 사용하게 되는 데이터를 어두운 색으로 표시하였고 
서비스들은 같은 순서로 배치하였기 떄문에 y = -x 모양의 그래프를 이상적인 모델로 생각하고
서로 다른 서비스간에 연관관계가 높게 나타난 부분 즉 어두운 색이 많은 부분에 검토를 진행했습니다.
// 표시된 부분과 같이 픽업예약, 방문예약이라는 서비스의 api와 매장정보의 데이터의 결합도가 높은것을 확인했고
// 결합도가 높으면 bounded context의 독립성이 저하되기 떄문에
// 세 서비스를 매장이라는 하나의 서비스로 통합하게 되었습니다.
리뷰와 문의도 상품과 결합도가 높아 통합하게 되었고
재고와 상품은 데이터 일관성을 위해서 하나의 테이블로 관리하는 것이 더 좋다고 판단해서 통합하게 되었습니다.
장바구니는 기존에 회원정보와 연관이 많다고 생각했는데 히트맵을 작성해보니 주문과 결합도가 더 높아 주문 서비스로 통합하였습니다.
처음에는 각 서비스가 각 데이터베이스를 가지기 때문에 다른 서비스에서 그 데이터를 사용하려면
무조건 join연산을 일으켜야 한다고 생각해서 상품 서비스와 주문 서비스의 결합도가 높게 나타났는데
비즈니스 처리를 위해 일부 데이터의 복제와 중복의 허용도 필요하다는 것을 알게되어
일부 데이터를 복제하는 것으로 데이터 스키마를 조정하였고
// 비기능적 요구사항에 따라 마이페이지라는 조회 전용 서비스를 추가하여
// 기존 비즈니스 관점의 13개 서비스 후보에서 최종 8개의 마이크로 서비스 후보를 도출하였습니다.


다음으로 보리스 다이어그램을 작성하여 
후보 서비스 기준으로 타 서비스, 외부 시스템과의 연계 대상을 식별하고 통신 방식을 정의하였습니다.
// 그 중에서 동기 방식, 비동기 방식 각 1개씩 구현을 진행하였습니다.
먼저 동기방식은 주문 생성시 상품의 재고를 조회하는 API로,
주문 요청된 상품의 재고를 주문 수량과 비교하여 주문진행 여부가 결정되므로 
// 즉각적인 응답이 필요하여 동기 방식으로 정의하였습니다.
다음으로 비동기 방식은 주문 완료시 상품의 재고를 변경하는 API로,
상품 서비스가 가용하지 않아도 주문 서비스를 독립적으로 처리가능해야하므로 비동기방식으로 정의하였습니다.


API 설계 및 구현 내용입니다.
상품 재고 조회를 요청하는 API는 동기방식 Request, Response 패턴을 사용하였고
get 메서드와 상품id라는 매개변수를 이용해 주문된 상품의 재고 정보를 응답받는 api 입니다.
응답 예시에 재고 조회 요청의 응답과 주문수량이 상품재고보다 큰 것이 확인되어 주문이 생성된 화면을 첨부하였습니다.
재고 정보의 수정을 요청하는 API는 비동기 방식, Apache kafka를 활용한 publish/subscribe 패턴을 사용하였습니다.
// 고객이 상품을 수령하여 주문의 상태가 완료로 변경되면 kafka에 메세지를 발행하게 되고 
// 이를 구독하고 있던 상품 서비스가 메세지를 인식하여 상품 재고를 변경하도록 하였습니다.
응답 예시는 주문 상태를 주문완료로 변경해준 모습이고 이에 따라 재고가 수정되었는데 
이를 확인하기 위해 상품 조회한 결과를 첨부하였습니다.
// 기존 10개 재고에서 5개 주문하여 재고가 5개로 변경된 것을 확인하였습니다.


마지막으로 과제를 통해 느낀 점에 대해서 정리해보았습니다.
기존 퍼블릭 클라우드나 msa에 대하여 개념만 알고있었는데 멘토링을 통해 마이크로 서비스 아키텍처의 특징을 이해하고 
학습한 내용을 실습과 설계를 통해 적용하는 과정에서 이해도를 높일 수 있었던 점이 가장 좋았습니다.
또 기존 비즈니스 로직이 대부분 SQL에 몰려있는 개발에서 JPA 사용으로 쿼리보다 객체에 집중한 개발을 경험할 수 있었습니다.
어려웠던 점은 서비스의 특성, 요구사항을 직접 정의하고 사용자 관점에서 시뮬레이션하는 것이 어려웠습니다.
또 Git, miro, lucid chart 등 처음 사용해 보는 툴이 많아서 서툴고 작업 시간이 오래 소요되어 어려웠습니다.
아쉬운 점은 설계한 사항의 타당성을 검증하기 위해 더 많은 API 개발과 더 다양한 기술 패턴 구현을 하지 못한 것이 아쉽습니다.
또 퍼블릭 클라우드 웹 서버 구축 실습을 진행했고 AWS Aurora postgre를 DB로 사용해 보았으나 마이크로 서비스를 구축하는데
필요한 인프라 설계를 경험하지 못해 아쉬웠습니다.
msa를 문자 그대로 아케틱처나 기술로만 생각했는데 다양한 사람들이 만나서 협업하는 방식이라는 것을 알게 되어 
서비스 기획자나 개발자와의 협업이 기대됩니다.
앞으로 msa 뿐만 아니라 컨테이너, devops등 클라우드 네이티브 역량을 향상하고 싶습니다.
이상입니다. 감사합니다.


- 어그리게이트; 커맨드와 이벤트에 의해 상태가 변경되는 데이터

- 높은 응집도: 한 서비스 내의 처리 요소들 간의 기능적 연관도
  낮은 결합도: 한 서비스와 다른 서비스 간의 상호 의존도, 연관관계

- 동기: 요청을 보냈을 때 응답이 돌아와야 다음 동작을 수행할 수 있다.
- 비동기: 요청을 보냈을 때 응답 상태와 상관 없이 다음 동작을 수행할 수 있다.

코드 까보기

- JPA; 개발자가 직접 jdbc api를 쓰는 것이 아니고 jpa 내부에서 sql 호출하여 db와 통신
  기존 필드 변경시 모든 sql 수정 필요, jpa는 필드만 추가하면 sql은 jpa가 처리
JPA 마이바티스 쿼리를 직접 적어 엔티티를 세이브만 하면 인서트 해줌 쿼리가 아니라 함수를 쓰는거 
jpa (Java Persistence API) 자바 orm(객체 관계 매핑) 기술

포스트 그레가 오라클의 문법을 그대로 사용 오라클은 라이센스 비용


스프링부트 사용한이유? 스프링해봣는데 클라우드는 스프링부트 마니 하드라
설정의 많은 부분이 자동화
스프링부트랑 스프링 다른점 라이브러리 링크 하는거
8300 기본 8080인데 포트 나눠서 띄우려고

세마포어? 카운트 
로그인되어있다 전제하에
범위가 서비스 설계와 통신제어 인증 부분은 아직 고민을 못해봣고 중요한거 ㄴ알고잇다
서비스간의 통신에도 인증이 필요 차후 열시미 

트래픽이 몰렷을때 어떻게 대응이 될까? 현재 재고가 ㅁ중요하다고 생각해서 
동기방시거으로 재고 확인을 해줫으니까
비즈니스 시나리오를 바꿀수 도 있을것같다
재고를 확인하지 않거나 하고 일단 승인을 다 받아준 후에 가등록 후에 100명은 확정 900명 탈락시키는 시나리오


로그 지우기
출근하자마자  확인
코드 시연 연습

dto entity contoroller jpa 의미 파악하기
dto: 계층 간 데이터 교환을 위해 사용하는 객체
vo: 값을 갖는 순수한 도메인, 객체를 값처럼 사용
entity: DB 테이블과 매핑되는 객체
controller: 사용자의 요청을 어떻게 처리할지 결정하는 객체
service: 세분화된 비즈니스 로직을 처리하는 객체, 컨트롤러가 받은 요청에 알맞은 정보를 가공해서 다시 넘겨줌

patch 와 put 의 차이점

협업이기대돼?
msa특징이뭔데?

ddd왜함?
데이터 중심의 접근법을 탈피해 비즈니스 도메인 별로 나누어 설계
높은 응집도 낮은 결합도
